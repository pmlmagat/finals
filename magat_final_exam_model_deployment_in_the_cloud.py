# -*- coding: utf-8 -*-
"""Magat Final Exam: Model Deployment in the Cloud

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15CGsw1ikcbIituydSAJ6L0zcRFNbnQLC
"""

! pip install tensorflow_hub

! pip install opendatasets

## Import important libraries

import urllib.request
import tempfile
import io
import opendatasets as od
import os
from PIL import Image

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

import warnings
warnings.filterwarnings("ignore")

od.download('https://www.kaggle.com/datasets/samuelcortinhas/muffin-vs-chihuahua-image-classification?select=train')

## Train and Test directory

train_dir='/content/muffin-vs-chihuahua-image-classification/train'
test_dir='/content/muffin-vs-chihuahua-image-classification/test'

## Shows the number of classes and class names

class_names = sorted(os.listdir(train_dir))
n_classes = len(class_names)

class_dis = [len(os.listdir(train_dir + '/' + name)) for name in class_names]

print(f"Number of Classes : {n_classes}\nClass names : {class_names}")

## Plot sample images
fig, axs = plt.subplots(2, 5, figsize=(15, 6))
fig.subplots_adjust(hspace=0.4, wspace=0.4)
axs = axs.ravel()

## Plot muffin images
muffin_dir = os.path.join(train_dir, 'muffin')
muffin_images = os.listdir(muffin_dir)[:5]
for i, image_name in enumerate(muffin_images):
    image_path = os.path.join(muffin_dir, image_name)
    image = Image.open(image_path)
    axs[i].imshow(image)
    axs[i].set_title("Muffin")

## Plot chihuahua images
chihuahua_dir = os.path.join(train_dir, 'chihuahua')
chihuahua_images = os.listdir(chihuahua_dir)[:5]
for i, image_name in enumerate(chihuahua_images):
    image_path = os.path.join(chihuahua_dir, image_name)
    image = Image.open(image_path)
    axs[i+5].imshow(image)
    axs[i+5].set_title("Chihuahua")

plt.show()

num_classes = 2

## Creating model with pre-trained weights from ImageNet
model = Sequential()
model.add(MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet', pooling='avg'))
model.add(Dense(num_classes, activation='softmax'))

## Freeze the trained layers of MobileNetV2
model.layers[0].trainable = False

model.summary()

model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])

image_size = 224

## Fit the images
data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)

train_generator = data_gen.flow_from_directory(
        '/content/muffin-vs-chihuahua-image-classification/train',
        target_size=(image_size, image_size),
        batch_size=32,
        class_mode='categorical')

validation_generator = data_gen.flow_from_directory(
        '/content/muffin-vs-chihuahua-image-classification/test',
        target_size=(image_size, image_size),
        batch_size=32,
        class_mode='categorical')

##  Fit the model
history = model.fit(
    train_generator,
    epochs=5,
    steps_per_epoch=20,
    validation_data=validation_generator,
    validation_steps=7
)

## Get the train and test accuracy
train_accuracy = history.history['accuracy'][-1]
test_accuracy = history.history['val_accuracy'][-1]

print("Train Accuracy:", train_accuracy)
print("Test Accuracy:", test_accuracy)

! pip install h5py

## Define the checkpoint filepath
checkpoint_filepath = 'final_model.hdf5'

## Define the ModelCheckpoint callback
checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_filepath,
    monitor='val_accuracy',
    verbose=1,
    save_best_only=True,
    mode='max'
)

## Include the callback in the model's fit() method
history = model.fit(
    train_generator,
    epochs=5,
    steps_per_epoch=20,
    validation_data=validation_generator,
    validation_steps=7,
    callbacks=[checkpoint_callback]
)

final_accuracy = history.history['val_accuracy'][-1]
print(f"Final Test Accuracy: {final_accuracy}")

from tensorflow.keras.models import load_model
import tensorflow_hub as hub

custom_objects = {"KerasLayer": hub.KerasLayer}
model = load_model('/content/final_model.hdf5', custom_objects=custom_objects)

_, val_accuracy = model.evaluate(validation_generator, verbose=0)
print('> %.3f' % (val_accuracy * 100.0))

import random

# Define the labels for the dataset
labels = ['chihuahua', 'muffin']

# Load the trained model
model = tf.keras.models.load_model('/content/final_model.hdf5')

# Set the path to the test directory
test_dir = '/content/muffin-vs-chihuahua-image-classification/test'

# Get a random test image path
random_class = random.choice(labels)
random_image_path = os.path.join(test_dir, random_class, random.choice(os.listdir(os.path.join(test_dir, random_class))))

# Load and preprocess the test image
image = Image.open(random_image_path)
image = image.resize((224, 224))
image = np.array(image) / 255.0
image_batch = np.expand_dims(image, axis=0)

# Perform the prediction
prediction = model.predict(image_batch)
predicted_label = labels[np.argmax(prediction)]

# Show the image
plt.imshow(image)
plt.title(f"Actual Label: {random_class}\nPredicted Label: {predicted_label}")
plt.axis('off')
plt.show()